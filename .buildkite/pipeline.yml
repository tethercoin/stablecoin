# SPDX-FileCopyrightText: 2021 Oxhead Alpha
# SPDX-License-Identifier: MIT

env:
  FETCH_CONTRACT: >-
    mkdir -p haskell/test/resources/
    && buildkite-agent artifact download stablecoin.tz haskell/test/resources/
    && buildkite-agent artifact download stablecoin.fa1.2.tz haskell/test/resources/
    && buildkite-agent artifact download metadata.tz haskell/test/resources/ --step "LIGO-contract"
    && cp "./nix/sources.json" "./haskell/test/resources/"
  TEZOS_CLIENT_UNSAFE_DISABLE_DISCLAIMER: "Y"

.local-chain-env: &local-chain-env
  TASTY_CLEVELAND_NODE_ENDPOINT: "http://localhost:8733"
  CHAIN_TEST_MONEYBAG_SECRET_KEY: "unencrypted:edsk3AvAoPS5jFov49aWBQ9oVtCPwNSne2CriHvkFxfeCg4Srr5bak"
  # this key is defined in local-chain bootstrap accounts list in
  # https://github.com/serokell/aquarius-infra/blob/master/servers/albali/chain.nix

.kathmandunet-env: &kathmandunet-env
  TASTY_CLEVELAND_NODE_ENDPOINT: "https://kathmandu.testnet.tezos.serokell.team"
  CHAIN_TEST_MONEYBAG_SECRET_KEY: "$TESTNET_MONEYBAG"
  CHAIN_TEST_MONEYBAG_PASSWORD: "$TESTNET_MONEYBAG_PASSWORD"

.network-tests: &network-tests
  commands:
    - eval "$FETCH_CONTRACT"
    - cd haskell/
    - export PATH=$(nix-build ../ -A stablecoin-client)/bin:$PATH
    - nix build -L -f .. test
    # Note that 'refill-balance' below is the initial 'TASTY_CLEVELAND_MONEYBAG_SECRET_KEY' balance
    # which may need to be adjusted in case of insufficient balance errors
    - $(nix-build ../ -A run-chain-tests
        --argstr refill-balance 1100
        --argstr node-endpoint "$$TASTY_CLEVELAND_NODE_ENDPOINT"
        --argstr step-moneybag "$$CHAIN_TEST_MONEYBAG_SECRET_KEY"
        --argstr step-moneybag-password "$$CHAIN_TEST_MONEYBAG_PASSWORD"
        --no-out-link
        --argstr scenario './result/bin/stablecoin-test --cleveland-mode=only-network')
  retry:
    automatic:
      limit: 1

steps:
 - label: hlint
   if: &not_scheduled
     build.source != "schedule"
   command:
     nix run -f. pkgs.hlint -c ./scripts/lint.sh

 - label: reuse lint
   command: nix run -f. pkgs.reuse -c reuse lint
   if: *not_scheduled

 - label: check trailing whitespace
   command: .buildkite/check-trailing-whitespace.sh
   if: *not_scheduled

 - label: xrefcheck
   command: "nix run -f https://github.com/serokell/xrefcheck/archive/b54c38d91bd45e5c402ebf51d68c653faf959c2c.tar.gz -c xrefcheck"
   if: *not_scheduled
   soft_fail: true

 - label: LIGO-contract
   key: LIGO-contract
   commands:
     - nix-build -A tezos-contract -o stablecoin_raw.tz
     - nix run -f. morley -c morley optimize --contract stablecoin_raw.tz --output stablecoin.tz
     - nix-build -A tezos-contract-fa1-2 -o stablecoin.fa1.2_raw.tz
     - nix run -f. morley -c morley optimize --contract stablecoin.fa1.2_raw.tz --output stablecoin.fa1.2.tz
     - nix-build -A tezos-metadata-contract -o metadata.tz
   artifact_paths:
     - stablecoin.tz
     - stablecoin.fa1.2.tz
     - metadata.tz

 # wait for the contract step to complete, so the next steps can download generated contract
 - wait

 - label: build library
   key: build_library
   if: *not_scheduled
   timeout_in_minutes: 180
   commands:
     - eval "$FETCH_CONTRACT"
     - nix build -L -f. lib

 - label: haddock
   if: *not_scheduled
   depends_on: build_library
   commands:
     - eval "$FETCH_CONTRACT"
     - nix build -L -f. haddock

 - label: test
   key: test
   if: *not_scheduled
   depends_on: build_library
   commands:
     - eval "$FETCH_CONTRACT"
     - cd haskell
     - nix build -L -f .. test
     - ./result/bin/stablecoin-test --cleveland-mode=disable-network

 - label: nettest-local-chain-014
   key: nettest-local-chain-014
   if: *not_scheduled
   depends_on: build_library
   <<: *network-tests
   env:
     <<: *local-chain-env

 - label: nettest-scheduled-kathmandunet
   key: nettest-scheduled-kathmandunet
   if: build.source == "schedule"
   depends_on:
     - build_library
     - LIGO-contract
   <<: *network-tests
   env:
     <<: *kathmandunet-env
     # Running all of the tests on network will end up draining the moneybag; for now, only FA1.2 tests are run
     TASTY_PATTERN: '/Test.FA1_2/||/Lorentz.Contracts.Nettest/'
   timeout_in_minutes: 360

 - label: weeder
   key: weeder
   if: *not_scheduled
   depends_on: build_library
   commands:
     - eval "$FETCH_CONTRACT"
     - cd haskell
     - nix-build .. -A weeder-script
     # weeder needs .cabal file:
     - nix run -f.. pkgs.haskellPackages.hpack -c hpack
     - ./result

 - label: packaging
   if: *not_scheduled
   depends_on:
     - test
     - nettest-local-chain-014
     - nettest-scheduled-kathmandunet
     - weeder
   commands:
     - eval "$FETCH_CONTRACT"
     - nix-build -A stablecoin-client -o stablecoin-static
     - nix run -f . pkgs.upx -c upx stablecoin-static/bin/stablecoin-client -o stablecoin-client
   artifact_paths:
     - ./stablecoin-client

notify:
  - email: "tezos-alerts@serokell.io"
    if: build.state == "failed" && build.source == "schedule"
